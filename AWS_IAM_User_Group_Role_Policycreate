Terraform tf file create task :
-------------------------------
1- Create a Ec2 instance by terraform tf file 
------------------------------------------
provider "aws" {
  region = "a-south-1"
}
resource "aws_instance" "web" {
   ami = "ami-0287a05f0ef0e9d9a"
   instance_type = "t2.micro"
   tags = {
    Name = "web-server"
  }
}
data "aws_instance" "web_instance" {
  instance_id = "i-0daf00bfec48779fe"  
}
output "instance_public_ip" {
  value = data.aws_instance.web_instance.public_ip
}
output "instance_

AccessKey:
SecretKey:

--------------------------------------------------------
# main.tf

provider "aws" {
  region = "us-west-2"  # Change to your desired AWS region
}

# Define a data source to get information about an EC2 instance
data "aws_instance" "example_instance" {
  instance_id = "i-0123456789abcdef0"  # Replace with your actual instance ID
}

# Output the public IP address of the instance
output "instance_public_ip" {
  value = data.aws_instance.example_instance.public_ip
}

Terraform tf file create task :
-------------------------------
1- Create a Ec2 instance by terraform tf file 
------------------------------------------
provider "aws" {
  region = "a-south-1"
}
resource "aws_instance" "web" {
   ami = "ami-0287a05f0ef0e9d9a"
   instance_type = "t2.micro"
   tags = {
    Name = "web-server"
  }
}
data "aws_instance" "web_instance" {
  instance_id = "i-0daf00bfec48779fe"  
}
output "instance_public_ip" {
  value = data.aws_instance.web_instance.public_ip
}
output "instance_

AccessKey:AKIAZ5QWTGKYP5UEPQN4
SecretKey:nbV2z0fkzr5lR+uvd5gZiDOhRj5Eiay4/ZXjJ/bY

--------------------------------------------------------
# main.tf

provider "aws" {
  region = "us-west-2"  # Change to your desired AWS region
}

# Define a data source to get information about an EC2 instance
data "aws_instance" "example_instance" {
  instance_id = "i-0123456789abcdef0"  # Replace with your actual instance ID
}

# Output the public IP address of the instance
output "instance_public_ip" {
  value = data.aws_instance.example_instance.public_ip
}
----------------------------------------------

aws_iam_user
-------------
resource "aws_iam_user" "lb" {
  name = "loadbalancer"
  path = "/system/"

  tags = {
    tag-key = "tag-value"
  }
}

aws_iam_group
-------------
resource "aws_iam_group" "developers" {
  name = "developers"
  path = "/users/"
}

aws_iam_group_policy
-----------------------
resource "aws_iam_group_policy" "my_developer_policy" {
  name  = "my_developer_policy"
  group = aws_iam_group.my_developers.name

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "ec2:Describe*",
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

aws_iam_group_policy-attachement
-----------------------------------
resource "aws_iam_group_policy_attachment" "test-attach" {
  group      = aws_iam_group.group.name
  policy_arn = aws_iam_policy.policy.arn
}



aws_iam_user_group_membership
------------------------------
resource "aws_iam_user_group_membership" "example2" {
  user = aws_iam_user.user1.name

  groups = [
    aws_iam_group.group3.name,
  ]
}

aws_iam_user_policy
-------------------
resource "aws_iam_user_policy" "lb_ro" {
  name = "test"
  user = aws_iam_user.lb.name

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "ec2:Describe*",
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

aws_iam-user_policy_attachment
-------------------------------
resource "aws_iam_user_policy_attachment" "test-attach" {
  user       = aws_iam_user.user.name
  policy_arn = aws_iam_policy.policy.arn
}

--------------------------

Role create on AWS by using terraform:
-------------------------------
data "aws_iam_role" "example" {
  name = "an_example_role_name"
}

data "aws_iam_roles" "roles" {}

data "aws_iam_roles" "roles" {
  name_regex = ".*project.*"
}




------------
Policy create for AWS by using terraform:

data "aws_iam_policy_document" "example" {
  statement {
    sid = "1"

    actions = [
      "s3:ListAllMyBuckets",
      "s3:GetBucketLocation",
    ]

    resources = [
      "arn:aws:s3:::*",
    ]
  }

  statement {
    actions = [
      "s3:ListBucket",
    ]

    resources = [
      "arn:aws:s3:::${var.s3_bucket_name}",
    ]

    condition {
      test     = "StringLike"
      variable = "s3:prefix"

      values = [
        "",
        "home/",
        "home/&{aws:username}/",
      ]
    }
  }

  statement {
    actions = [
      "s3:*",
    ]

    resources = [
      "arn:aws:s3:::${var.s3_bucket_name}/home/&{aws:username}",
      "arn:aws:s3:::${var.s3_bucket_name}/home/&{aws:username}/*",
    ]
  }
}

resource "aws_iam_policy" "example" {
  name   = "example_policy"
  path   = "/"
  policy = data.aws_iam_policy_document.example.json
}

