Deploy AWS Target Group, Elastic Load Balancer & ELB Listener Using Terraform:
------------------------------------------------------------------------------
provider.tf
----------
provider "aws" {
  region                  = "var.AWS_REGION"
  shared_credentials_file = "<Your AWS Credentials File path>"
}

variable.tf
----------
variable "AWS_REGION" {
  default = "us-east-1"
}
data "aws_vpc" "GetVPC" {
filter {
    name   = "tag:Name"
    values = ["CustomVPC"]
          }
}

version.tf
------------
terraform {
  required_version = ">= 0.12"
}

main.tf
-------
data "aws_instances" "ec2_list" {
  instance_state_names = ["running"]
}

resource "aws_lb_target_group" "CustomTG" {
  name     = "CustomTG"
  port     = 80
  protocol = "HTTP"
  vpc_id   = data.aws_vpc.GetVPC.id
  target_type = "instance"
}

resource "aws_lb_target_group_attachment" "CustomTGAttach" {
  count = "${length(data.aws_instances.ec2_list.ids)}"
  target_group_arn = aws_lb_target_group.CustomTG.arn
  target_id        = "${data.aws_instances.ec2_list.ids[count.index]}"
  port             = 80
}

data "aws_subnet_ids" "GetSubnet_Ids" {
  vpc_id = data.aws_vpc.GetVPC.id
  filter {
    name   = "tag:Type"
    values = ["Public"]
  }
}

resource "aws_security_group" "elb_sg" {
  name        = "allow_http_elb"
  description = "Allow http inbound traffic for elb"
  vpc_id      = data.aws_vpc.GetVPC.id

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "terraform-elb-security-group"
  }
}

resource "aws_lb" "CustomELB" {
  name = "CustomELB"
  subnets = data.aws_subnet_ids.GetSubnet_Ids.ids
  security_groups = [aws_security_group.elb_sg.id]
  tags = {
    Name = "CustomELB"
  }
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.CustomELB.arn
  port              = "80"
  protocol          = "HTTP"
  default_action {
    type = "forward"
    forward {
      target_group {
        arn = aws_lb_target_group.CustomTG.arn
      }
      stickiness {
        enabled  = true
        duration = 28800
      }
    }
  }
}

output.tf
-----------
output "CustomTG" {
  value       = aws_lb_target_group.CustomTG.id
  description = "This is Target Group id."
}
output "CustomELB" {
  value       = aws_lb.CustomELB.id
  description = "This is load balancer ID."
}
output "elb_sg" {
  value       = aws_security_group.elb_sg.id
  description = "This is Security Group ID."
}





