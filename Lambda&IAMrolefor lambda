terraform/
├── main.tf
├── variables.tf
├── outputs.tf
└── modules/
    ├── lambdarole/
    │   ├── main.tf
    │   ├── variables.tf
    │   └── outputs.tf
    └── lambda/
        ├── main.tf
        ├── variables.tf
        └── outputs.tf

----------------------------
Module 1: IAM Role for Lambda
------------------------------
modules/lambdarole/main.tf
------------------------
# IAM Role for Lambda execution
resource "aws_iam_role" "this" {
  name               = var.role_name
  assume_role_policy = data.aws_iam_policy_document.lambda_trust_policy.json

  tags = var.tags
}

# Lambda basic execution role policy attachment
resource "aws_iam_role_policy_attachment" "lambda_basic_policy" {
  role       = aws_iam_role.this.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Additional policies (if provided)
resource "aws_iam_role_policy_attachment" "additional_policies" {
  count      = length(var.additional_policy_arns)
  role       = aws_iam_role.this.name
  policy_arn = element(var.additional_policy_arns, count.index)
}

# IAM policy document for Lambda trust policy
data "aws_iam_policy_document" "lambda_trust_policy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }

    effect = "Allow"
  }
}

modules/lambdarole/variables.tf
--------------------------------
variable "role_name" {
  description = "The name of the IAM role"
  type        = string
}

variable "tags" {
  description = "Tags to associate with the IAM role"
  type        = map(string)
  default     = {}
}

variable "additional_policy_arns" {
  description = "A list of additional policy ARNs to attach to the Lambda role"
  type        = list(string)
  default     = []
}

modules/lambdarole/outputs.tf
----------------------------
output "role_arn" {
  description = "The ARN of the created IAM role"
  value       = aws_iam_role.this.arn
}

output "role_name" {
  description = "The name of the created IAM role"
  value       = aws_iam_role.this.name
}

Module 2: Lambda Function
-------------------------
modules/lambda/main.tf
-----------------------
resource "aws_lambda_function" "this" {
  function_name = var.function_name
  role          = var.role_arn
  handler       = var.handler
  runtime       = var.runtime

  # Assuming the code is packaged as a ZIP file
  filename      = var.filename
  source_code_hash = filebase64sha256(var.filename)

  environment = var.environment

  tags = var.tags
}

# Optional: Add event source mappings, e.g., for triggering from S3 or API Gateway

modules/lambda/variables.tf
---------------------------
variable "function_name" {
  description = "The name of the Lambda function"
  type        = string
}

variable "role_arn" {
  description = "The ARN of the IAM role for the Lambda function"
  type        = string
}

variable "handler" {
  description = "The function entrypoint in your code"
  type        = string
}

variable "runtime" {
  description = "The runtime environment for the Lambda function"
  type        = string
}

variable "filename" {
  description = "The path to the packaged Lambda function code (ZIP file)"
  type        = string
}

variable "environment" {
  description = "A map of environment variables for the Lambda function"
  type        = map(string)
  default     = {}
}

variable "tags" {
  description = "Tags to associate with the Lambda function"
  type        = map(string)
  default     = {}
}

modules/lambda/outputs.tf
----------------------------
output "lambda_arn" {
  description = "The ARN of the created Lambda function"
  value       = aws_lambda_function.this.arn
}

output "lambda_name" {
  description = "The name of the created Lambda function"
  value       = aws_lambda_function.this.function_name
}

Root Configuration:
---------------------
main.tf
--------
provider "aws" {
  region = "us-east-1"
}

# IAM Role for Lambda
module "lambdarole" {
  source = "./modules/lambdarole"
  
  role_name            = "my_lambda_execution_role"
  additional_policy_arns = ["arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
                             "arn:aws:iam::aws:policy/service-role/AWSLambdaRole",
							 "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess",
							 "arn:aws:iam::aws:policy/CloudWatchEventsFullAccess",]
  
  tags = {
    Environment = "production"
    Project     = "serverless-app"
  }
}

# Lambda Function
module "lambda" {
  source        = "./modules/lambda"

  function_name = "my_lambda_function"
  role_arn      = module.lambdarole.role_arn
  handler       = "index.lambda_handler"
  runtime       = "python3.9"
  filename      = "lambda_function_payload.zip" # Path to your packaged function
  environment   = {
    MY_ENV_VAR = "some_value"
  }
  
  tags = {
    Environment = "production"
    Project     = "serverless-app"
  }
}

