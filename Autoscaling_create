provider "aws" {
  region                  = "us-east-1"
  shared_credentials_file = "<Your AWS Credentials File path>"
}
terraform {
  required_version = ">= 0.12"
}
#sg.tf or securitygroup for ASG 
resource "aws_security_group" "asg_sg" {
  name        = "ASG_Allow_Traffic"
  description = "Allow all inbound traffic for asg"
  vpc_id      = data.aws_vpc.GetVPC.id

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 8
    to_port     = 0
    protocol    = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
  tags = {
    Name = "terraform-asg-security-group"
  }
}

#variables 
data "aws_vpc" "GetVPC" {
filter {
    name   = "tag:Name"
    values = ["CustomVPC"]
  }
}

#-------------------------Fetch Public Subnets List---------------------------------
data "aws_subnet_ids" "GetSubnet_Ids" {
  vpc_id = data.aws_vpc.GetVPC.id
  filter {
    name   = "tag:Type"
    values = ["Public"]
  }
}

data "aws_subnet" "GetSubnet" {
  count = "${length(data.aws_subnet_ids.GetSubnet_Ids.ids)}"
  id    = "${tolist(data.aws_subnet_ids.GetSubnet_Ids.ids)[count.index]}"
}

output "subnet_list" {
  value = "${data.aws_subnet.GetSubnet.*.id}"
}

#-------------------------Fetch Target Group ARN---------------------------------
variable "elb_tg_arn" {
  type    = string
  default = ""
}
data "aws_lb_target_group" "elb_tg" {
  arn  = var.elb_tg_arn
}

output "tg_arn" {
  value = var.elb_tg_arn
}

#-------------------------Variables For Autoscaling---------------------------------

variable "instance_type" {
  type = string
  default = "t2.micro"
}
variable "autoscaling_group_min_size" {
  type = number
  default = 2
}
variable "autoscaling_group_max_size" {
  type = number
  default = 3
}

variable "aws_key_pair" {
  type = string
  default = "<File Path>"
}

output "subnet_list1" {
  value = "${data.aws_subnet.GetSubnet.*.availability_zone_id}"
}


#asg.tf or main.tf
# Create a new EC2 launch configuration. This will be used with our auto scaling group.
resource "aws_launch_configuration" "launch_config_dev" {
  name_prefix                 = "webteir_dev"
  image_id                    = "ami-0742b4e673072066f"
  instance_type               = "${var.instance_type}"
  #key_name                    = "${var.aws_key_pair}"
  security_groups             = ["${aws_security_group.asg_sg.id}"]
  associate_public_ip_address = true
  user_data                   = <<EOF
    #! /bin/bash
    sudo su
    sudo yum update
    sudo yum install -y httpd
    sudo chkconfig httpd on
    sudo service httpd start
    echo "<h1>Deployed EC2 Using ASG</h1>" | sudo tee /var/www/html/index.html
    EOF
  lifecycle {
    create_before_destroy = true
  }
}

# Create the auto scaling group
resource "aws_autoscaling_group" "autoscaling_group_dev" {
  launch_configuration = "${aws_launch_configuration.launch_config_dev.id}"
  min_size             = "${var.autoscaling_group_min_size}"
  max_size             = "${var.autoscaling_group_max_size}"
  target_group_arns    = ["${data.aws_lb_target_group.elb_tg.arn}"]
  vpc_zone_identifier  = "${data.aws_subnet.GetSubnet.*.id}"

  tag {
    key                 = "Name"
    value               = "autoscaling-group-dev"
    propagate_at_launch = true
  }
}
